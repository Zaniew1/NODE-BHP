// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Company{
  id Int @id @default(autoincrement())
  author Int 
  name String
  nip String
  regon String?
  pkd String[]
  postalCode String?
  city String?
  street String?
  phoneNumber Int?
  email String?
  notes String?
  updatedAt DateTime @updatedAt
  createdAt  DateTime   @default(now())
  workers Worker[]
  trainings Training[]
}
model Worker{
  id Int @id @default(autoincrement())
  name String
  surname String
  author Int
  company Company? @relation(fields: [companyId], references: [id])
  companyId Int 
  // optional
  secondName String?
  sex String?
  trainingEntry DateTime?
  trainingPeriodic DateTime?
  medicalExamination DateTime?
  department String?
  employmentForm String?
  absence String?
  pesel Int?
  IdCardNumber String?
  dateOfBirth DateTime?
  placeOfBirth String?
  disability Boolean?
  postalCode String?
  city String?
  street String?
  phoneNumber Int?
  email String?
  position String?
  positionType String?
  positionSection String?
  positionNotes String?
  youth Boolean?
  nightShift Boolean?
  notes String?
  updatedAt DateTime @updatedAt
  createdAt  DateTime   @default(now())
}
model Training{
  id Int @id @default(autoincrement())
  number String
  author Int 
  company Company @relation(fields: [companyId], references: [id])
  companyId Int @unique
  companyDepartment Int
  companyNip Int
  companyPkd String?
  companyPostalCode String?
  companyCity String?
  companyStreet String?
  trainingType String
  trainingForm String
  trainingDate DateTime
  trainingValidity DateTime
  program String?
  createdAt  DateTime   @default(now())
  updatedAt DateTime @updatedAt
}